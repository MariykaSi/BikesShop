{"ast":null,"code":"import _objectSpread from \"/Users/mariyasinoverska/Documents/studyFiles/js/beetrootAcademy/lesson_21/react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/mariyasinoverska/Documents/studyFiles/js/beetrootAcademy/lesson_21/react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar cart = {\n  state: {\n    products: [{\n      productId: \"1\",\n      quantity: 1\n    }]\n  },\n  reducers: {\n    addProduct: function addProduct(state, productId) {\n      var product = {\n        productId: productId,\n        quantity: 1\n      };\n      return state.products.push(product);\n    },\n    removeProduct: function removeProduct(state, productId) {\n      var productCurent = state.products.find(function (product) {\n        return product.productId === productId;\n      });\n      var productsNew = state.products.filter(function (product) {\n        return product.productId !== productCurent.productId;\n      });\n      return state.products = productsNew;\n    },\n    setQuantity: function setQuantity(state, productId, qty) {\n      var productCurent = state.products.find(function (product) {\n        return product.productId === productId;\n      });\n      var indexProduct = state.products.indexOf(productCurent);\n      console.log(newState);\n\n      var newState = _toConsumableArray(state.products.slice(0, indexProduct)).concat([_objectSpread({}, productCurent, {\n        quantity: qty\n      })], _toConsumableArray(state.products.slice(indexProduct + 1)));\n\n      return state.products;\n    }\n  }\n};\nexport default cart;","map":{"version":3,"sources":["/Users/mariyasinoverska/Documents/studyFiles/js/beetrootAcademy/lesson_21/react-app/src/models/cart.js"],"names":["cart","state","products","productId","quantity","reducers","addProduct","product","push","removeProduct","productCurent","find","productsNew","filter","setQuantity","qty","indexProduct","indexOf","console","log","newState","slice"],"mappings":";;AAAA,IAAMA,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,SAAS,EAAE,GADb;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADQ;AADL,GADI;AASXC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UADQ,sBACGL,KADH,EACUE,SADV,EACqB;AAC3B,UAAII,OAAO,GAAG;AACZJ,QAAAA,SAAS,EAAEA,SADC;AAEZC,QAAAA,QAAQ,EAAE;AAFE,OAAd;AAIA,aAAOH,KAAK,CAACC,QAAN,CAAeM,IAAf,CAAoBD,OAApB,CAAP;AACD,KAPO;AAQRE,IAAAA,aARQ,yBAQMR,KARN,EAQaE,SARb,EAQwB;AAC9B,UAAIO,aAAa,GAAGT,KAAK,CAACC,QAAN,CAAeS,IAAf,CAClB,UAAAJ,OAAO;AAAA,eAAIA,OAAO,CAACJ,SAAR,KAAsBA,SAA1B;AAAA,OADW,CAApB;AAGA,UAAIS,WAAW,GAAGX,KAAK,CAACC,QAAN,CAAeW,MAAf,CAChB,UAAAN,OAAO;AAAA,eAAIA,OAAO,CAACJ,SAAR,KAAsBO,aAAa,CAACP,SAAxC;AAAA,OADS,CAAlB;AAGA,aAAQF,KAAK,CAACC,QAAN,GAAiBU,WAAzB;AACD,KAhBO;AAiBRE,IAAAA,WAjBQ,uBAiBIb,KAjBJ,EAiBWE,SAjBX,EAiBsBY,GAjBtB,EAiB2B;AACjC,UAAML,aAAa,GAAGT,KAAK,CAACC,QAAN,CAAeS,IAAf,CACpB,UAAAJ,OAAO;AAAA,eAAIA,OAAO,CAACJ,SAAR,KAAsBA,SAA1B;AAAA,OADa,CAAtB;AAGA,UAAMa,YAAY,GAAGf,KAAK,CAACC,QAAN,CAAee,OAAf,CAAuBP,aAAvB,CAArB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AACA,UAAMA,QAAQ,sBACTnB,KAAK,CAACC,QAAN,CAAemB,KAAf,CAAqB,CAArB,EAAwBL,YAAxB,CADS,4BAGPN,aAHO;AAIVN,QAAAA,QAAQ,EAAEW;AAJA,8BAMTd,KAAK,CAACC,QAAN,CAAemB,KAAf,CAAqBL,YAAY,GAAG,CAApC,CANS,EAAd;;AAQA,aAAOf,KAAK,CAACC,QAAb;AACD;AAhCO;AATC,CAAb;AA4CA,eAAeF,IAAf","sourcesContent":["const cart = {\n  state: {\n    products: [\n      {\n        productId: \"1\",\n        quantity: 1\n      }\n    ]\n  },\n  reducers: {\n    addProduct(state, productId) {\n      let product = {\n        productId: productId,\n        quantity: 1\n      };\n      return state.products.push(product);\n    },\n    removeProduct(state, productId) {\n      let productCurent = state.products.find(\n        product => product.productId === productId\n      );\n      let productsNew = state.products.filter(\n        product => product.productId !== productCurent.productId\n      );\n      return (state.products = productsNew);\n    },\n    setQuantity(state, productId, qty) {\n      const productCurent = state.products.find(\n        product => product.productId === productId\n      );\n      const indexProduct = state.products.indexOf(productCurent);\n      console.log(newState);\n      const newState = [\n        ...state.products.slice(0, indexProduct),\n        {\n          ...productCurent,\n          quantity: qty\n        },\n        ...state.products.slice(indexProduct + 1)\n      ];\n      return state.products;\n    }\n  }\n};\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}